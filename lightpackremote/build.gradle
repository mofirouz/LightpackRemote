apply plugin: 'android'
apply plugin: 'idea'
apply plugin: 'android-apt'

group = 'com.mofirouz.lightpackremoteplus'

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations {
    apt
}

apt {
    arguments {
        androidManifestFile variant.processResources.manifestFile
        resourcePackageName "com.mofirouz.lightpackremoteplus"
    }
}

android {
    signingConfigs {
        Release {
        }
    }
    compileSdkVersion 19
    buildToolsVersion '19.1.0'
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 19
        versionCode 3
        versionName "1.2"
    }
    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    sourceSets {
        main {
           java.srcDirs = ['src/main/java', 'build/source/apt_generated']
        }
    }

//    signingConfigs {
//        release {
//            storeFile file("")
//            storePassword new String(System.console().readPassword("\$ Enter keystore password: "))
//            keyAlias "ReleaseKey"
//            keyPassword new String(System.console().readPassword("\$ Enter key password: "))
//        }
//    }
//
//    buildTypes {
//        release {
//            signingConfig signingConfigs.release
//        }
//    }
}

dependencies {
    compile project(':jLightpack')

    apt 'org.androidannotations:androidannotations:3.0.1'
    compile "org.androidannotations:androidannotations-api:3.0.1"

    compile 'com.android.support:support-v4:18.0.+'
    compile 'com.github.chrisbanes.actionbarpulltorefresh:library:+'
    compile 'com.mobsandgeeks:android-saripaar:1.0.2'
    compile 'com.larswerkman:HoloColorPicker:1.3'
}

def getSourceSetName(variant) {
    return new File(variant.dirName).getName();
}

android.applicationVariants.all { variant ->
    def aptOutputDir = project.file("build/source/apt")
    def aptOutput = new File(aptOutputDir, variant.dirName)
    println "****************************"
    println "variant: ${variant.name}"
    println "manifest: ${variant.processResources.manifestFile}"
    println "aptOutput: ${aptOutput}"
    println "****************************"

    android.sourceSets[getSourceSetName(variant)].java.srcDirs += aptOutput.getPath()

    variant.javaCompile.options.compilerArgs += [
            '-processorpath', configurations.apt.getAsPath(),
//            '-processor', 'com.googlecode.androidannotations.AndroidAnnotationProcessor',
            '-AandroidManifestFile=' + variant.processResources.manifestFile,
            '-s', aptOutput
    ]

    variant.javaCompile.source = variant.javaCompile.source.filter { p ->
        return !p.getPath().startsWith(aptOutputDir.getPath())
    }

    variant.javaCompile.doFirst {
        aptOutput.mkdirs()
    }
}